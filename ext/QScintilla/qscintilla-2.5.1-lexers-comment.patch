Index: QScintilla-gpl-2.5.1/Qt4/qscilexerfortran77.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerfortran77.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerfortran77.cpp	(copie de travail)
@@ -303,3 +303,13 @@
 {
     emit propertyChanged("fold.compact",(fold_compact ? "1" : "0"));
 }
+
+
+QString QsciLexerFortran77::commentLine() const{
+    return QString("!");
+}
+
+QStringList QsciLexerFortran77::commentBlock() const{
+    QStringList cb;
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerpostscript.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerpostscript.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerpostscript.h	(copie de travail)
@@ -164,6 +164,15 @@
     //! \sa setFoldAtElse()
     bool foldAtElse() const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 public slots:
     //! If \a tokenize is true then tokens are marked.  The default is false.
     //!
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerlua.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerlua.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerlua.h	(copie de travail)
@@ -173,6 +173,15 @@
     //! \sa setFoldCompact()
     bool foldCompact() const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 public slots:
     //! If \a fold is true then trailing blank lines are included in a fold
     //! block. The default is true.
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexertcl.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexertcl.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexertcl.h	(copie de travail)
@@ -178,6 +178,15 @@
 	//! \sa setFoldComments()
 	bool foldComments() const {return fold_comments;}
 
+	//! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 protected:
 	//! The lexer's properties are read from the settings \a qs.  \a prefix
 	//! (which has a trailing '/') should be used as a prefix to the key of
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerd.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerd.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerd.h	(copie de travail)
@@ -206,6 +206,15 @@
     //! \sa setFoldCompact()
     bool foldCompact() const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 public slots:
     //! If \a fold is true then "} else {" lines can be folded.  The default is
     //! false.
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexercss.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexercss.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexercss.h	(copie de travail)
@@ -184,6 +184,15 @@
     //! \sa setFoldCompact()
     bool foldCompact() const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 public slots:
     //! If \a fold is true then multi-line comment blocks can be folded.
     //! The default is false.
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerproperties.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerproperties.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerproperties.h	(copie de travail)
@@ -128,6 +128,15 @@
     //! \sa setInitialSpaces()
     bool initialSpaces() const {return initial_spaces;}
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 public slots:
     //! If \a fold is true then trailing blank lines are included in a fold
     //! block. The default is true.
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexervhdl.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexervhdl.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexervhdl.h	(copie de travail)
@@ -199,6 +199,15 @@
     //! \sa foldAtParenthesis()
     virtual void setFoldAtParenthesis(bool fold);
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 protected:
     //! The lexer's properties are read from the settings \a qs.  \a prefix
     //! (which has a trailing '/') should be used as a prefix to the key of
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexermatlab.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexermatlab.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexermatlab.h	(copie de travail)
@@ -110,6 +110,15 @@
     //! This is intended to be used in user preference dialogs.
     QString description(int style) const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 private:
     QsciLexerMatlab(const QsciLexerMatlab &);
     QsciLexerMatlab &operator=(const QsciLexerMatlab &);
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerxml.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerxml.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerxml.h	(copie de travail)
@@ -95,6 +95,15 @@
     //! \sa setScriptsStyled()
     bool scriptsStyled() const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 protected:
     //! The lexer's properties are read from the settings \a qs.  \a prefix
     //! (which has a trailing '/') should be used as a prefix to the key of
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexertex.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexertex.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexertex.h	(copie de travail)
@@ -146,6 +146,15 @@
     //! \sa setProcessIf()
     bool processIf() const {return process_if;}
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 protected:
     //! The lexer's properties are read from the settings \a qs.  \a prefix
     //! (which has a trailing '/') should be used as a prefix to the key of
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerperl.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerperl.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerperl.h	(copie de travail)
@@ -229,6 +229,15 @@
     //! \sa setFoldPODBlocks()
     bool foldPODBlocks() const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 public slots:
     //! If \a fold is true then multi-line comment blocks can be folded.
     //! The default is false.
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexeryaml.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexeryaml.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexeryaml.h	(copie de travail)
@@ -129,6 +129,15 @@
     //! \sa setFoldComments()
     bool foldComments() const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 public slots:
     //! If \a fold is true then multi-line comment blocks can be folded.
     //! The default is false.
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerpascal.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerpascal.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerpascal.h	(copie de travail)
@@ -208,6 +208,15 @@
     //! \sa foldPreprocessor()
     virtual void setFoldPreprocessor(bool fold);
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 protected:
     //! The lexer's properties are read from the settings \a qs.  \a prefix
     //! (which has a trailing '/') should be used as a prefix to the key of
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerpov.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerpov.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerpov.h	(copie de travail)
@@ -169,6 +169,15 @@
     //! \sa setFoldDirectives()
     bool foldDirectives() const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 public slots:
     //! If \a fold is true then multi-line comment blocks can be folded.
     //! The default is false.
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerbash.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerbash.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerbash.h	(copie de travail)
@@ -152,6 +152,15 @@
 	//! \sa setFoldCompact()
 	bool foldCompact() const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 public slots:
 	//! If \a fold is true then multi-line comment blocks can be folded.
 	//! The default is false.
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexermakefile.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexermakefile.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexermakefile.h	(copie de travail)
@@ -111,6 +111,15 @@
     //! This is intended to be used in user preference dialogs.
     QString description(int style) const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 private:
     QsciLexerMakefile(const QsciLexerMakefile &);
     QsciLexerMakefile &operator=(const QsciLexerMakefile &);
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexer.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexer.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexer.h	(copie de travail)
@@ -271,9 +271,17 @@
     //! if there was no error.
     //!
     //! \sa readSettings()
-    bool writeSettings(QSettings &qs,
-               const char *prefix = "/Scintilla") const;
+    bool writeSettings(QSettings &qs, const char *prefix = "/Scintilla") const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+    
 public slots:
     //! The auto-indentation style is set to \a autoindentstyle.
     //!
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexercmake.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexercmake.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexercmake.h	(copie de travail)
@@ -142,6 +142,15 @@
     //! \sa setFoldAtElse()
     bool foldAtElse() const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 public slots:
     //! If \a fold is true then ELSE blocks can be folded.  The default is
     //! false.
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerruby.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerruby.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerruby.h	(copie de travail)
@@ -227,6 +227,15 @@
     //! \sa setFoldCompact()
     bool foldCompact() const {return fold_compact;}
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 protected:
     //! The lexer's properties are read from the settings \a qs.  \a prefix
     //! (which has a trailing '/') should be used as a prefix to the key of
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerpython.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerpython.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerpython.h	(copie de travail)
@@ -258,6 +258,15 @@
     //! \sa setV3BytesAllowed()
     bool v3BytesAllowed() const {return v3_bytes;}
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+    
 public slots:
     //! If \a fold is true then indented comment blocks can be folded.  The
     //! default is false.
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexercpp.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexercpp.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexercpp.h	(copie de travail)
@@ -246,6 +246,15 @@
     //! \sa setDollarsAllowed()
     bool dollarsAllowed() const {return dollars;}
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+    
 public slots:
     //! If \a fold is true then "} else {" lines can be folded.  The
     //! default is false.
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerfortran77.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerfortran77.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerfortran77.h	(copie de travail)
@@ -148,6 +148,15 @@
     //! \sa setFoldCompact()
     bool foldCompact() const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 public slots:
     //! If \a fold is true then trailing blank lines are included in a fold
     //! block. The default is true.
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerhtml.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerhtml.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerhtml.h	(copie de travail)
@@ -491,6 +491,15 @@
     //! \sa setMakoTemplates()
     bool makoTemplates() const {return mako_templates;}
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 public slots:
     //! If \a fold is true then trailing blank lines are included in a fold
     //! block. The default is true.
Index: QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerverilog.h
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerverilog.h	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/Qsci/qscilexerverilog.h	(copie de travail)
@@ -202,6 +202,15 @@
     //! \sa setFoldAtModule()
     bool foldAtModule() const;
 
+    //! Returns the string that comment a line
+    //! An empty string is returned if there is no such string (ie comment line
+    //! is not supported.
+    virtual QString commentLine() const;
+    //! Returns a string list of two element to comment a block
+    //! the comment block start string and the comment block end string
+    //! An empty string list is block comments are not supported.
+    virtual QStringList commentBlock() const;
+
 protected:
     //! The lexer's properties are read from the settings \a qs.  \a prefix
     //! (which has a trailing '/') should be used as a prefix to the key of
Index: QScintilla-gpl-2.5.1/Qt4/qscilexerhtml.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerhtml.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerhtml.cpp	(copie de travail)
@@ -1173,3 +1173,13 @@
 {
     emit propertyChanged("lexer.html.mako", (mako_templates ? "1" : "0"));
 }
+
+QString QsciLexerHTML::commentLine() const{
+    return QString("");
+}
+
+QStringList QsciLexerHTML::commentBlock() const{
+    QStringList cb;
+    cb << "<!--" << "-->";
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexerverilog.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerverilog.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerverilog.cpp	(copie de travail)
@@ -436,3 +436,13 @@
 {
     emit propertyChanged("fold.verilog.flags",(fold_atmodule ? "1" : "0"));
 }
+
+QString QsciLexerVerilog::commentLine() const{
+    return QString("//");
+}
+
+QStringList QsciLexerVerilog::commentBlock() const{
+    QStringList cb;
+    cb << "/*" << "*/";
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexerpostscript.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerpostscript.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerpostscript.cpp	(copie de travail)
@@ -452,3 +452,12 @@
 {
     emit propertyChanged("fold.at.else",(fold_atelse ? "1" : "0"));
 }
+
+QString QsciLexerPostScript::commentLine() const{
+    return QString("%");
+}
+
+QStringList QsciLexerPostScript::commentBlock() const{
+    QStringList cb;
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexerlua.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerlua.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerlua.cpp	(copie de travail)
@@ -371,3 +371,12 @@
 {
     emit propertyChanged("fold.compact",(fold_compact ? "1" : "0"));
 }
+
+QString QsciLexerLua::commentLine() const{
+    return QString("--");
+}
+
+QStringList QsciLexerLua::commentBlock() const{
+    QStringList cb;
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexerd.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerd.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerd.cpp	(copie de travail)
@@ -454,3 +454,13 @@
 {
     emit propertyChanged("fold.compact",(fold_compact ? "1" : "0"));
 }
+
+QString QsciLexerD::commentLine() const{
+    return QString("//");
+}
+
+QStringList QsciLexerD::commentBlock() const{
+    QStringList cb;
+    cb << "/+" << "+/";
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexercss.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexercss.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexercss.cpp	(copie de travail)
@@ -382,3 +382,13 @@
 {
     emit propertyChanged("fold.compact",(fold_compact ? "1" : "0"));
 }
+
+QString QsciLexerCSS::commentLine() const{
+    return QString("");
+}
+
+QStringList QsciLexerCSS::commentBlock() const{
+    QStringList cb;
+    cb << "/*" << "*/";
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexerproperties.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerproperties.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerproperties.cpp	(copie de travail)
@@ -220,3 +220,12 @@
 {
     emit propertyChanged("lexer.props.allow.initial.spaces", (fold_compact ? "1" : "0"));
 }
+
+QString QsciLexerProperties::commentLine() const{
+    return QString("#");
+}
+
+QStringList QsciLexerProperties::commentBlock() const{
+    QStringList cb;
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexervhdl.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexervhdl.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexervhdl.cpp	(copie de travail)
@@ -425,3 +425,13 @@
 {
     emit propertyChanged("fold.at.Parenthese",(fold_atparenth ? "1" : "0"));
 }
+
+
+QString QsciLexerVHDL::commentLine() const{
+    return QString("--");
+}
+
+QStringList QsciLexerVHDL::commentBlock() const{
+    QStringList cb;
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexerxml.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerxml.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerxml.cpp	(copie de travail)
@@ -259,3 +259,13 @@
 {
     emit propertyChanged("lexer.xml.allow.scripts",(scripts ? "1" : "0"));
 }
+
+QString QsciLexerXML::commentLine() const{
+    return QString("");
+}
+
+QStringList QsciLexerXML::commentBlock() const{
+    QStringList cb;
+    cb << "<!--" << "-->";
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexertex.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexertex.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexertex.cpp	(copie de travail)
@@ -316,3 +316,12 @@
 {
     emit propertyChanged("lexer.tex.auto.if", (process_if ? "1" : "0"));
 }
+
+QString QsciLexerTeX::commentLine() const{
+    return QString("%");
+}
+
+QStringList QsciLexerTeX::commentBlock() const{
+    QStringList cb;
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexeryaml.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexeryaml.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexeryaml.cpp	(copie de travail)
@@ -272,3 +272,12 @@
 {
     emit propertyChanged("fold.comment.yaml",(fold_comments ? "1" : "0"));
 }
+
+QString QsciLexerYAML::commentLine() const{
+    return QString("#");
+}
+
+QStringList QsciLexerYAML::commentBlock() const{
+    QStringList cb;
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexerpascal.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerpascal.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerpascal.cpp	(copie de travail)
@@ -434,3 +434,13 @@
 {
     emit propertyChanged("lexer.pascal.smart.highlighting", (smart_highlight ? "1" : "0"));
 }
+
+QString QsciLexerPascal::commentLine() const{
+    return QString("//");
+}
+
+QStringList QsciLexerPascal::commentBlock() const{
+    QStringList cb;
+    cb << "{" << "}";
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexerbash.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerbash.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerbash.cpp	(copie de travail)
@@ -354,3 +354,12 @@
 {
     emit propertyChanged("fold.compact", (fold_compact ? "1" : "0"));
 }
+
+QString QsciLexerBash::commentLine() const{
+    return QString("#");
+}
+
+QStringList QsciLexerBash::commentBlock() const{
+    QStringList cb;
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexer.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexer.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexer.cpp	(copie de travail)
@@ -678,3 +678,12 @@
         emit paperChanged(c, QsciScintillaBase::STYLE_DEFAULT);
     }
 }
+
+QString QsciLexer::commentLine() const{
+    return QString();
+}
+
+QStringList QsciLexer::commentBlock() const{
+    return QStringList();
+}
+
Index: QScintilla-gpl-2.5.1/Qt4/qscilexercmake.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexercmake.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexercmake.cpp	(copie de travail)
@@ -311,3 +311,12 @@
 {
     emit propertyChanged("fold.at.else",(fold_atelse ? "1" : "0"));
 }
+
+QString QsciLexerCMake::commentLine() const{
+    return QString("#");
+}
+
+QStringList QsciLexerCMake::commentBlock() const{
+    QStringList cb;
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexerruby.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerruby.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerruby.cpp	(copie de travail)
@@ -450,3 +450,12 @@
 {
     emit propertyChanged("fold.compact", (fold_compact ? "1" : "0"));
 }
+
+QString QsciLexerRuby::commentLine() const{
+    return QString("#");
+}
+
+QStringList QsciLexerRuby::commentBlock() const{
+    QStringList cb;
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexerpython.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerpython.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerpython.cpp	(copie de travail)
@@ -473,3 +473,13 @@
 {
     emit propertyChanged("lexer.python.strings.b",(v3_bytes ? "1" : "0"));
 }
+
+QString QsciLexerPython::commentLine() const{
+    return QString("#");
+}
+
+QStringList QsciLexerPython::commentBlock() const{
+    QStringList cb;
+    cb << "\"\"\"" << "\"\"\"";
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexercpp.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexercpp.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexercpp.cpp	(copie de travail)
@@ -592,3 +592,13 @@
 {
     emit propertyChanged("lexer.cpp.allow.dollars",(dollars ? "1" : "0"));
 }
+
+QString QsciLexerCPP::commentLine() const{
+    return QString("//");
+}
+
+QStringList QsciLexerCPP::commentBlock() const{
+    QStringList cb;
+    cb << "/*" << "*/";
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexertcl.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexertcl.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexertcl.cpp	(copie de travail)
@@ -443,3 +443,13 @@
 {
     emit propertyChanged("fold.comment", (fold_comments ? "1" : "0"));
 }
+
+QString QsciLexerTCL::commentLine() const{
+    return QString("#");
+}
+
+QStringList QsciLexerTCL::commentBlock() const{
+    QStringList cb;
+    cb << "##" << "##";
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexermatlab.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexermatlab.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexermatlab.cpp	(copie de travail)
@@ -167,3 +167,13 @@
 
     return QString();
 }
+
+QString QsciLexerMatlab::commentLine() const{
+    return QString("%");
+}
+
+QStringList QsciLexerMatlab::commentBlock() const{
+    QStringList cb;
+    cb << "%{" << "}%";
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexerperl.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerperl.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerperl.cpp	(copie de travail)
@@ -553,3 +553,12 @@
 {
     emit propertyChanged("fold.perl.pod",(fold_pod_blocks ? "1" : "0"));
 }
+
+QString QsciLexerPerl::commentLine() const{
+    return QString("#");
+}
+
+QStringList QsciLexerPerl::commentBlock() const{
+    QStringList cb;
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexerpov.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexerpov.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexerpov.cpp	(copie de travail)
@@ -468,3 +468,13 @@
 {
     emit propertyChanged("fold.directive",(fold_directives ? "1" : "0"));
 }
+
+QString QsciLexerPOV::commentLine() const{
+    return QString("//");
+}
+
+QStringList QsciLexerPOV::commentBlock() const{
+    QStringList cb;
+    cb << "/*" << "*/";
+    return cb;
+}
Index: QScintilla-gpl-2.5.1/Qt4/qscilexermakefile.cpp
===================================================================
--- QScintilla-gpl-2.5.1/Qt4/qscilexermakefile.cpp	(révision 97)
+++ QScintilla-gpl-2.5.1/Qt4/qscilexermakefile.cpp	(copie de travail)
@@ -164,3 +164,12 @@
 
     return QsciLexer::defaultPaper(style);
 }
+
+QString QsciLexerMakefile::commentLine() const{
+    return QString("#");
+}
+
+QStringList QsciLexerMakefile::commentBlock() const{
+    QStringList cb;
+    return cb;
+}
